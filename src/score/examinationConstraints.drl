/*
 * Copyright 2010 Red Hat, Inc. and/or its affiliates.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package score;
    dialect "java"

import org.optaplanner.core.api.score.buildin.hardsoft.HardSoftScoreHolder;

import optaplanner.Examen;
import optaplanner.Calendrier;
import optaplanner.CalendrierContraintes;
import optaplanner.Periode;
import optaplanner.PeriodePenalite;
import optaplanner.PeriodePenaliteType;
import optaplanner.Salle;
import optaplanner.SallePenalite;
import optaplanner.SallePenaliteType;
import utilisateur.Etudiant;
import optaplanner.Epreuve;
import optaplanner.solver.EpreuveConflit;

global HardSoftScoreHolder scoreHolder;

// ############################################################################
// Hard constraints
// ############################################################################

// Two exams in the same periode which share etudiants.
rule "conflitExamenDansLaMemePeriode"
    when
        $epreuveConflit : EpreuveConflit($leftEpreuve : leftEpreuve, $rightEpreuve : rightEpreuve)
        $leftExam : Examen(epreuve == $leftEpreuve, $periode : periode, periode != null)
        $rightExam : Examen(epreuve == $rightEpreuve, periode == $periode)
    then
        scoreHolder.penalize(kcontext, $epreuveConflit.getEtudiantSize());
end

// More time required during a periode than available in that periode.
rule "periodeDureeTropCourte"
    when
        $exam : Examen(epreuveDuree > periodeDuree, periode != null)
    then
        scoreHolder.penalize(kcontext, $exam.getEpreuveEtudiantSize());
end

// More seating required during a periode in a salle than available in that salle.
rule "capaciteSalleTropPetite"
    when
        $periode : Periode()
        $salle : Salle($capacite : capacite)
        accumulate(
            Examen(periode == $periode, salle == $salle, $etudiantSize : epreuveEtudiantSize);
            $totalEtudiantSize : sum($etudiantSize);
            $totalEtudiantSize > $capacite
        )
    then
        scoreHolder.penalize(kcontext, $capacite - $totalEtudiantSize);
end

// Period hard constraints
rule "periodePenaliteExamenCoincidencePenalite"
    when
        $periodePenalty : PeriodePenalite(
            periodePenaliteType == SallePenaliteType.EXAM_COINCIDENCE,
            $leftEpreuve : leftEpreuve,
            $rightEpreuve : rightEpreuve
        )
        $leftExam : Examen(epreuve == $leftEpreuve, $leftPeriod : periode, periode != null)
        $rightExam : Examen(epreuve == $rightEpreuve, periode != $leftPeriod, periode != null)
        // Left and right don't share a etudiant because those are filtered out in ExaminationImporter
    then
        scoreHolder.penalize(kcontext, $leftEpreuve.getEtudiantSize() + $rightEpreuve.getEtudiantSize());
end
rule "periodePenaliteExclusionPenalite"
    when
        $periodePenalty : PeriodePenalite(
            periodePenaliteType == SallePenaliteType.EXCLUSION,
            $leftEpreuve : leftEpreuve,
            $rightEpreuve : rightEpreuve
        )
        $leftExam : Examen(epreuve == $leftEpreuve, $leftPeriod : periode, periode != null)
        $rightExam : Examen(epreuve == $rightEpreuve, periode == $leftPeriod)
    then
        scoreHolder.penalize(kcontext, $leftEpreuve.getEtudiantSize() + $rightEpreuve.getEtudiantSize());
end
rule "periodePenaliteAfterPenalite"
    when
        $periodePenalty : PeriodePenalite(
            periodePenaliteType == SallePenaliteType.AFTER,
            $leftEpreuve : leftEpreuve,
            $rightEpreuve : rightEpreuve
        )
        $leftExam : Examen(epreuve == $leftEpreuve, $leftPeriodIndex : periodeIndex, periode != null)
        $rightExam : Examen(epreuve == $rightEpreuve, $leftPeriodIndex <= periodeIndex, periode != null)
    then
        scoreHolder.penalize(kcontext, $leftEpreuve.getEtudiantSize() + $rightEpreuve.getEtudiantSize());
end

// Room hard constraints
rule "sallePenaliteExclusivePenalite"
    when
        $sallePenalty : RoomPenalty(
            sallePenaltyType == RoomPenaltyType.ROOM_EXCLUSIVE,
            $epreuve : epreuve
        )
        $leftExam : Examen(epreuve == $epreuve, $salle : salle, salle != null, $periode : periode, periode != null)
        $rightExam : Examen(salle == $salle, periode == $periode, epreuve != $epreuve, $otherEpreuve : epreuve)
    then
        scoreHolder.penalize(kcontext, $epreuve.getEtudiantSize() + $otherEpreuve.getEtudiantSize());
end

// ############################################################################
// Soft constraints
// ############################################################################

// Two exams in a row which share etudiants
rule "twoInARowPenalite"
    when
        $epreuveConflit : EpreuveConflit($leftEpreuve : leftEpreuve, $rightEpreuve : rightEpreuve)
        $leftExam : Examen(epreuve == $leftEpreuve, $leftDayIndex : dayIndex, $leftPeriodIndex : periodeIndex, periode != null)
        $rightExam : Examen(epreuve == $rightEpreuve, dayIndex == $leftDayIndex,
            Math.abs($leftPeriodIndex - periodeIndex) == 1)
    then
        scoreHolder.penalize(kcontext, $epreuveConflit.getEtudiantSize());
end

// TODO check if merging twoExamsInARow and twoExamsInADay can be a noticeable performance boost
// Two exams in a day which share etudiants
rule "twoInAJourPenalite"
    when
        $epreuveConflit : EpreuveConflit($leftEpreuve : leftEpreuve, $rightEpreuve : rightEpreuve)
        $leftExam : Examen(epreuve == $leftEpreuve, $leftDayIndex : dayIndex, $leftPeriodIndex : periodeIndex, periode != null)
        $rightExam : Examen(epreuve == $rightEpreuve, dayIndex == $leftDayIndex,
            Math.abs($leftPeriodIndex - periodeIndex) > 1)
    then
        scoreHolder.penalize(kcontext, $epreuveConflit.getEtudiantSize());
end

// Exams which share etudiants have to few periodes between them
rule "periodeSpreadLength"
    when
        $constraintConfiguration : ExaminationConstraintConfiguration()
        $epreuveConflit : EpreuveConflit($leftEpreuve : leftEpreuve, $rightEpreuve : rightEpreuve)
        $leftExam : Examen(epreuve == $leftEpreuve, $leftPeriodIndex : periodeIndex, periode != null)
        $rightExam : Examen(epreuve == $rightEpreuve, periode != null,
            Math.abs($leftPeriodIndex - periodeIndex) < ($constraintConfiguration.getPeriodSpreadLength() + 1))
    then
        scoreHolder.penalize(kcontext, $epreuveConflit.getEtudiantSize());
end

// Several exams in the same salle and periode have different durations
rule "mixedDureePenalite"
    when
        $leftExam : Examen($leftId : id, periode != null, $periode : periode, salle != null, $salle : salle,
            $leftEpreuveDuree : epreuveDuree)
        // 4 mixed durations of 100, 150, 200 and 200 should only result in 2 penalties (for 100&150 and 100&200)
        // leftExam has lowest id of the periode+salle combo
        not Examen(periode == $periode, salle == $salle, id < $leftId)
        // rightExam has a different duration
        $rightExam : Examen(periode == $periode, salle == $salle, id > $leftId,
            epreuveDuree != $leftEpreuveDuree,
            $rightId : id, $rightEpreuveDuree : epreuveDuree
        )
        // rightExam has the lowest id of the periode+salle+rightDuree combo
        not Examen(periode == $periode, salle == $salle, id < $rightId,
            epreuveDuree == $rightEpreuveDuree
        )
    then
        scoreHolder.penalize(kcontext);
end

// Larger Exams towards the beginning of the examination session
rule "frontLoad"
    when
        $exam : Examen(epreuveFrontLoadLarge == true, periodeFrontLoadLast == true)
    then
        scoreHolder.penalize(kcontext);
end

// Period Penalty
rule "periodePenalitePenalite"
    when
        $periode : Periode(penalty != 0)
        $exam: Examen(periode == $periode)
    then
        scoreHolder.penalize(kcontext, $periode.getPenalty());
end

// Room Penalty
rule "sallePenalitePenalite"
    when
        $salle : Salle(penalty != 0)
        $exam: Examen(salle == $salle)
    then
        scoreHolder.penalize(kcontext, $salle.getPenalty());
end
