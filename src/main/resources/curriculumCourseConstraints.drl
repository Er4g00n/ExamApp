/*
 * Copyright 2010 Red Hat, Inc. and/or its affiliates.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package score;
    dialect "java"

import org.optaplanner.core.api.score.buildin.hardsoft.HardSoftScoreHolder;

import Examen.Examen;
import Examen.Calendrier;
import Examen.Jour;
import Examen.Epreuve;
import Examen.Periode;
import Salle.Salle;
import Examen.Timeslot;
import Examen.UnavailablePeriodPenalty;
import Examen.solver.CourseConflict;

global HardSoftScoreHolder scoreHolder;

// ############################################################################
// Hard constraints
// ############################################################################

// Lectures: A missing or extra lecture of a course.
// This hard constraint is built-in: the correct number of Lecture's is created

// Conflicts: Two conflicting lectures in the same period.
// Three conflicting lectures count as 3 violations: one for each pair.
rule "conflictingLecturesDifferentCourseInSamePeriod"
    when
        $courseConflict : Calendrier($leftCourse : leftCourse, $rightCourse : rightCourse)
        $leftLecture : Epreuve(examen == $leftCourse, $periode : periode, periode != null)
        $rightLecture : Epreuve(examen == $rightCourse, periode == $periode, this != $leftLecture)
    then
        scoreHolder.addHardConstraintMatch(kcontext, - $courseConflict.getConflictCount());
end
rule "conflictingLecturesSameCourseInSamePeriod"
    when
        Epreuve($leftId : id, $leftCourse : examen, $periode : periode, periode != null)
        Epreuve(examen == $leftCourse, periode == $periode, id > $leftId)
    then
        scoreHolder.addHardConstraintMatch(kcontext, - (1);
end

// RoomOccupancy: Two lectures in the same room at the same period.
// Any extra lecture in the same period and room counts as one more violation.
rule "roomOccupancy"
    when
        Epreuve($leftId : id, periode != null, $periode : periode, salle != null, $salle : salle)
        // $leftLecture has lowest id of the period+room combo
        not Epreuve(periode == $periode, salle == $salle, id < $leftId)
        // rightLecture has the same period
        Epreuve(periode == $periode, salle == $salle, id > $leftId, $rightId : id)
    then
        scoreHolder.addHardConstraintMatch(kcontext, -1);
end

// Availabilities: Each lecture in a period unavailable for that course.
rule "unavailablePeriodPenalty"
    when
        UnavailablePeriodPenalty($examen : examen, $periode : periode)
        Epreuve(examen == $examen, periode == $periode)
    then
        scoreHolder.addHardConstraintMatch(kcontext, -10);
end

// ############################################################################
// Soft constraints
// ############################################################################

// RoomCapacity: For each lecture, the number of students that attend the course should be less or equal
// than the number of seats of all the rooms that host its lectures.
// Each student above the capacity counts as 1 point of penalty.
rule "roomCapacity"
    when
        $epreuve : Epreuve(salle != null, studentSize > getSalle().getCapacite())
    then
        scoreHolder.addSoftConstraintMatch(kcontext, ($epreuve.getSalle().getCapacite() - $epreuve.getStudentSize()));
end

// MinimumWorkingDays: The lectures of each course should be spread into a minimum number of days.
// Each day below the minimum counts as 5 points of penalty.
rule "minimumWorkingDays"
    when
        $examen : Examen($minWorkingDaySize : minWorkingDaySize)
        accumulate(
            $jour : Jour()
            and exists Epreuve(examen == $examen, jour == $jour);
            $dayCount : count($jour);
            $dayCount < $minWorkingDaySize
        )
        // An uninitialized schedule should have no constraints broken
        exists Lecture(examen == $examen, period != null)
    then
        scoreHolder.addSoftConstraintMatch(kcontext, (($dayCount.intValue() - $minWorkingDaySize) * 5));
end


// RoomStability: All lectures of a course should be given in the same room.
// Each distinct room used for the lectures of a course, but the first, counts as 1 point of penalty.
rule "roomStability"
    when
        $examen : Examen())
        accumulate(
            $salle : Salle()
            and exists Lecture(examen == $examen, salle == $salle);
            $roomCount : count($salle);
            $roomCount > 1
        )
    then
        scoreHolder.addSoftConstraintMatch(kcontext, -($roomCount.intValue() - 1));
end
